// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: grpc/health/v1/health.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from '@bufbuild/protobuf/wire'
import { type CallContext, type CallOptions } from 'nice-grpc-common'

export const protobufPackage = 'grpc.health.v1'

export interface HealthCheckRequest {
  service: string
}

export interface HealthCheckResponse {
  status: HealthCheckResponse_ServingStatus
}

export enum HealthCheckResponse_ServingStatus {
  UNKNOWN = 0,
  SERVING = 1,
  NOT_SERVING = 2,
  /** SERVICE_UNKNOWN - Used only by the Watch method. */
  SERVICE_UNKNOWN = 3,
  UNRECOGNIZED = -1,
}

export function healthCheckResponse_ServingStatusFromJSON(
  object: any,
): HealthCheckResponse_ServingStatus {
  switch (object) {
    case 0:
    case 'UNKNOWN':
      return HealthCheckResponse_ServingStatus.UNKNOWN
    case 1:
    case 'SERVING':
      return HealthCheckResponse_ServingStatus.SERVING
    case 2:
    case 'NOT_SERVING':
      return HealthCheckResponse_ServingStatus.NOT_SERVING
    case 3:
    case 'SERVICE_UNKNOWN':
      return HealthCheckResponse_ServingStatus.SERVICE_UNKNOWN
    case -1:
    case 'UNRECOGNIZED':
    default:
      return HealthCheckResponse_ServingStatus.UNRECOGNIZED
  }
}

export function healthCheckResponse_ServingStatusToJSON(
  object: HealthCheckResponse_ServingStatus,
): string {
  switch (object) {
    case HealthCheckResponse_ServingStatus.UNKNOWN:
      return 'UNKNOWN'
    case HealthCheckResponse_ServingStatus.SERVING:
      return 'SERVING'
    case HealthCheckResponse_ServingStatus.NOT_SERVING:
      return 'NOT_SERVING'
    case HealthCheckResponse_ServingStatus.SERVICE_UNKNOWN:
      return 'SERVICE_UNKNOWN'
    case HealthCheckResponse_ServingStatus.UNRECOGNIZED:
    default:
      return 'UNRECOGNIZED'
  }
}

function createBaseHealthCheckRequest(): HealthCheckRequest {
  return { service: '' }
}

export const HealthCheckRequest: MessageFns<HealthCheckRequest> = {
  encode(message: HealthCheckRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.service !== '') {
      writer.uint32(10).string(message.service)
    }
    return writer
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HealthCheckRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input)
    let end = length === undefined ? reader.len : reader.pos + length
    const message = createBaseHealthCheckRequest()
    while (reader.pos < end) {
      const tag = reader.uint32()
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break
          }

          message.service = reader.string()
          continue
      }
      if ((tag & 7) === 4 || tag === 0) {
        break
      }
      reader.skip(tag & 7)
    }
    return message
  },

  fromJSON(object: any): HealthCheckRequest {
    return { service: isSet(object.service) ? globalThis.String(object.service) : '' }
  },

  toJSON(message: HealthCheckRequest): unknown {
    const obj: any = {}
    if (message.service !== '') {
      obj.service = message.service
    }
    return obj
  },

  create(base?: DeepPartial<HealthCheckRequest>): HealthCheckRequest {
    return HealthCheckRequest.fromPartial(base ?? {})
  },
  fromPartial(object: DeepPartial<HealthCheckRequest>): HealthCheckRequest {
    const message = createBaseHealthCheckRequest()
    message.service = object.service ?? ''
    return message
  },
}

function createBaseHealthCheckResponse(): HealthCheckResponse {
  return { status: 0 }
}

export const HealthCheckResponse: MessageFns<HealthCheckResponse> = {
  encode(message: HealthCheckResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== 0) {
      writer.uint32(8).int32(message.status)
    }
    return writer
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HealthCheckResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input)
    let end = length === undefined ? reader.len : reader.pos + length
    const message = createBaseHealthCheckResponse()
    while (reader.pos < end) {
      const tag = reader.uint32()
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break
          }

          message.status = reader.int32() as any
          continue
      }
      if ((tag & 7) === 4 || tag === 0) {
        break
      }
      reader.skip(tag & 7)
    }
    return message
  },

  fromJSON(object: any): HealthCheckResponse {
    return {
      status: isSet(object.status) ? healthCheckResponse_ServingStatusFromJSON(object.status) : 0,
    }
  },

  toJSON(message: HealthCheckResponse): unknown {
    const obj: any = {}
    if (message.status !== 0) {
      obj.status = healthCheckResponse_ServingStatusToJSON(message.status)
    }
    return obj
  },

  create(base?: DeepPartial<HealthCheckResponse>): HealthCheckResponse {
    return HealthCheckResponse.fromPartial(base ?? {})
  },
  fromPartial(object: DeepPartial<HealthCheckResponse>): HealthCheckResponse {
    const message = createBaseHealthCheckResponse()
    message.status = object.status ?? 0
    return message
  },
}

/**
 * Health is gRPC's mechanism for checking whether a server is able to handle
 * RPCs. Its semantics are documented in
 * https://github.com/grpc/grpc/blob/master/doc/health-checking.md.
 */
export type HealthDefinition = typeof HealthDefinition
export const HealthDefinition = {
  name: 'Health',
  fullName: 'grpc.health.v1.Health',
  methods: {
    /**
     * Check gets the health of the specified service. If the requested service
     * is unknown, the call will fail with status NOT_FOUND. If the caller does
     * not specify a service name, the server should respond with its overall
     * health status.
     *
     * Clients should set a deadline when calling Check, and can declare the
     * server unhealthy if they do not receive a timely response.
     *
     * Check implementations should be idempotent and side effect free.
     */
    check: {
      name: 'Check',
      requestType: HealthCheckRequest,
      requestStream: false,
      responseType: HealthCheckResponse,
      responseStream: false,
      options: {},
    },
    /**
     * Performs a watch for the serving status of the requested service.
     * The server will immediately send back a message indicating the current
     * serving status.  It will then subsequently send a new message whenever
     * the service's serving status changes.
     *
     * If the requested service is unknown when the call is received, the
     * server will send a message setting the serving status to
     * SERVICE_UNKNOWN but will *not* terminate the call.  If at some
     * future point, the serving status of the service becomes known, the
     * server will send a new message with the service's serving status.
     *
     * If the call terminates with status UNIMPLEMENTED, then clients
     * should assume this method is not supported and should not retry the
     * call.  If the call terminates with any other status (including OK),
     * clients should retry the call with appropriate exponential backoff.
     */
    watch: {
      name: 'Watch',
      requestType: HealthCheckRequest,
      requestStream: false,
      responseType: HealthCheckResponse,
      responseStream: true,
      options: {},
    },
  },
} as const

export interface HealthServiceImplementation<CallContextExt = {}> {
  /**
   * Check gets the health of the specified service. If the requested service
   * is unknown, the call will fail with status NOT_FOUND. If the caller does
   * not specify a service name, the server should respond with its overall
   * health status.
   *
   * Clients should set a deadline when calling Check, and can declare the
   * server unhealthy if they do not receive a timely response.
   *
   * Check implementations should be idempotent and side effect free.
   */
  check(
    request: HealthCheckRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<HealthCheckResponse>>
  /**
   * Performs a watch for the serving status of the requested service.
   * The server will immediately send back a message indicating the current
   * serving status.  It will then subsequently send a new message whenever
   * the service's serving status changes.
   *
   * If the requested service is unknown when the call is received, the
   * server will send a message setting the serving status to
   * SERVICE_UNKNOWN but will *not* terminate the call.  If at some
   * future point, the serving status of the service becomes known, the
   * server will send a new message with the service's serving status.
   *
   * If the call terminates with status UNIMPLEMENTED, then clients
   * should assume this method is not supported and should not retry the
   * call.  If the call terminates with any other status (including OK),
   * clients should retry the call with appropriate exponential backoff.
   */
  watch(
    request: HealthCheckRequest,
    context: CallContext & CallContextExt,
  ): ServerStreamingMethodResult<DeepPartial<HealthCheckResponse>>
}

export interface HealthClient<CallOptionsExt = {}> {
  /**
   * Check gets the health of the specified service. If the requested service
   * is unknown, the call will fail with status NOT_FOUND. If the caller does
   * not specify a service name, the server should respond with its overall
   * health status.
   *
   * Clients should set a deadline when calling Check, and can declare the
   * server unhealthy if they do not receive a timely response.
   *
   * Check implementations should be idempotent and side effect free.
   */
  check(
    request: DeepPartial<HealthCheckRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<HealthCheckResponse>
  /**
   * Performs a watch for the serving status of the requested service.
   * The server will immediately send back a message indicating the current
   * serving status.  It will then subsequently send a new message whenever
   * the service's serving status changes.
   *
   * If the requested service is unknown when the call is received, the
   * server will send a message setting the serving status to
   * SERVICE_UNKNOWN but will *not* terminate the call.  If at some
   * future point, the serving status of the service becomes known, the
   * server will send a new message with the service's serving status.
   *
   * If the call terminates with status UNIMPLEMENTED, then clients
   * should assume this method is not supported and should not retry the
   * call.  If the call terminates with any other status (including OK),
   * clients should retry the call with appropriate exponential backoff.
   */
  watch(
    request: DeepPartial<HealthCheckRequest>,
    options?: CallOptions & CallOptionsExt,
  ): AsyncIterable<HealthCheckResponse>
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>

function isSet(value: any): boolean {
  return value !== null && value !== undefined
}

export type ServerStreamingMethodResult<Response> = {
  [Symbol.asyncIterator](): AsyncIterator<Response, void>
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter
  decode(input: BinaryReader | Uint8Array, length?: number): T
  fromJSON(object: any): T
  toJSON(message: T): unknown
  create(base?: DeepPartial<T>): T
  fromPartial(object: DeepPartial<T>): T
}
