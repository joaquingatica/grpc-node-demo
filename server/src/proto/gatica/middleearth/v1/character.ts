// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: gatica/middleearth/v1/character.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from '@bufbuild/protobuf/wire'
import { Timestamp } from '../../../google/protobuf/timestamp'
import { People, peopleFromJSON, peopleToJSON } from './people'

export const protobufPackage = 'gatica.middleearth.v1'

export interface Character {
  id: string
  name: string
  people: People
  alive: boolean
  createdAtTime: Date | undefined
}

function createBaseCharacter(): Character {
  return { id: '', name: '', people: 0, alive: false, createdAtTime: undefined }
}

export const Character: MessageFns<Character> = {
  encode(message: Character, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== '') {
      writer.uint32(10).string(message.id)
    }
    if (message.name !== '') {
      writer.uint32(18).string(message.name)
    }
    if (message.people !== 0) {
      writer.uint32(24).int32(message.people)
    }
    if (message.alive !== false) {
      writer.uint32(32).bool(message.alive)
    }
    if (message.createdAtTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAtTime), writer.uint32(42).fork()).join()
    }
    return writer
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Character {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input)
    let end = length === undefined ? reader.len : reader.pos + length
    const message = createBaseCharacter()
    while (reader.pos < end) {
      const tag = reader.uint32()
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break
          }

          message.id = reader.string()
          continue
        case 2:
          if (tag !== 18) {
            break
          }

          message.name = reader.string()
          continue
        case 3:
          if (tag !== 24) {
            break
          }

          message.people = reader.int32() as any
          continue
        case 4:
          if (tag !== 32) {
            break
          }

          message.alive = reader.bool()
          continue
        case 5:
          if (tag !== 42) {
            break
          }

          message.createdAtTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()))
          continue
      }
      if ((tag & 7) === 4 || tag === 0) {
        break
      }
      reader.skip(tag & 7)
    }
    return message
  },

  fromJSON(object: any): Character {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : '',
      name: isSet(object.name) ? globalThis.String(object.name) : '',
      people: isSet(object.people) ? peopleFromJSON(object.people) : 0,
      alive: isSet(object.alive) ? globalThis.Boolean(object.alive) : false,
      createdAtTime: isSet(object.createdAtTime)
        ? fromJsonTimestamp(object.createdAtTime)
        : undefined,
    }
  },

  toJSON(message: Character): unknown {
    const obj: any = {}
    if (message.id !== '') {
      obj.id = message.id
    }
    if (message.name !== '') {
      obj.name = message.name
    }
    if (message.people !== 0) {
      obj.people = peopleToJSON(message.people)
    }
    if (message.alive !== false) {
      obj.alive = message.alive
    }
    if (message.createdAtTime !== undefined) {
      obj.createdAtTime = message.createdAtTime.toISOString()
    }
    return obj
  },

  create(base?: DeepPartial<Character>): Character {
    return Character.fromPartial(base ?? {})
  },
  fromPartial(object: DeepPartial<Character>): Character {
    const message = createBaseCharacter()
    message.id = object.id ?? ''
    message.name = object.name ?? ''
    message.people = object.people ?? 0
    message.alive = object.alive ?? false
    message.createdAtTime = object.createdAtTime ?? undefined
    return message
  },
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000)
  const nanos = (date.getTime() % 1_000) * 1_000_000
  return { seconds, nanos }
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000
  millis += (t.nanos || 0) / 1_000_000
  return new globalThis.Date(millis)
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o
  } else if (typeof o === 'string') {
    return new globalThis.Date(o)
  } else {
    return fromTimestamp(Timestamp.fromJSON(o))
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter
  decode(input: BinaryReader | Uint8Array, length?: number): T
  fromJSON(object: any): T
  toJSON(message: T): unknown
  create(base?: DeepPartial<T>): T
  fromPartial(object: DeepPartial<T>): T
}
